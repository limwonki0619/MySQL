-- 04. 조인(Join)과 부질의(SubQuery)

SELECT TABLE_NAME FROM USER_TABLES; /*존재하는 테이블의 테이블 이름을 출력*/

SELECT * FROM STUDENT;
SELECT * FROM ENROL;

-- 4.1.1 CROSS JOIN ------------------------------------------------------------
SELECT STUDENT.*, ENROL.* FROM STUDENT CROSS JOIN ENROL;

DESC STUDENT;
DESC ENROL;

-- 4.1.2 EQUI JOIN -------------------------------------------------------------

-- 1. WHERE절을 이용한 방법
SELECT STUDENT.STU_NO, STU_NAME, STU_DEPT, ENR_GRADE FROM STUDENT, ENROL
WHERE STUDENT.STU_NO = ENROL.STU_NO;

-- 2. NATURAL JOIN을 이용한 방법 
-- NATURAL JOIN은 자동으로 두 테이블의 열 이름이 같은 열을 이용하여 조인
SELECT STU_NO, STU_NAME, STU_DEPT, ENR_GRADE FROM STUDENT NATURAL JOIN ENROL;
-- 공통열이 2쌍 이상 존재하는 경우 NATURAL JOIN은 불가, 이때 JOIN~USING절을 이용

SELECT STU_NO, STU_NAME, STU_DEPT, ENR_GRADE FROM STUDENT JOIN ENROL USING(STU_NO);
-- USING으로 공통열을 알려줌 

-- 3. JOIN ~ ON 절을 이용한 방법
SELECT STUDENT.STU_NO, STU_NAME, STU_DEPT, ENR_GRADE 
FROM STUDENT JOIN ENROL ON STUDENT.STU_NO = ENROL.STU_NO;

DESC ENROL;
SELECT STU_NO, STU_NAME FROM STUDENT NATURAL JOIN ENROL WHERE SUB_NO = 101;

-- 논리 연산자 우선순위 주의 
SELECT STUDENT.STU_NO, STU_NAME 
FROM STUDENT, ENROL 
WHERE STUDENT.STU_NO=ENROL.STU_NO AND (SUB_NO = 101 OR SUB_NO=102);


-- '컴퓨터개론'과목을 수강하는 학생들의 학번, 이름, 과목이름을 검색하라

DESC SUBJECT;
DESC STUDENT;

-- 1.
SELECT STUDENT.STU_NO, STU_NAME, SUB_NAME
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO = ENROL.STU_NO
    AND ENROL.SUB_NO = SUBJECT.SUB_NO
    AND ENROL.SUB_NO = 101;

-- 2.     
SELECT STUDENT.STU_NO, STU_NAME, SUB_NAME
FROM STUDENT, ENROL, SUBJECT
WHERE STUDENT.STU_NO = ENROL.STU_NO
    AND ENROL.SUB_NO = SUBJECT.SUB_NO
    AND SUB_NAME = '컴퓨터개론';

-- 3.
SELECT STU_NO, STU_NAME, SUB_NAME
FROM STUDENT NATURAL JOIN ENROL NATURAL JOIN SUBJECT
WHERE SUB_NAME = '컴퓨터개론';

-- 4.
SELECT STU_NO, STU_NAME, SUB_NAME
FROM STUDENT JOIN ENROL USING(STU_NO) 
JOIN SUBJECT USING(SUB_NO)
WHERE SUB_NAME = '컴퓨터개론';

-- 5.
SELECT ENROL.STU_NO, STU_NAME, SUB_NAME
FROM STUDENT  JOIN ENROL ON STUDENT.STU_NO = ENROL.STU_NO
JOIN SUBJECT ON ENROL.SUB_NO = SUBJECT.SUB_NO
WHERE SUB_NAME = '컴퓨터개론';


-- 4.1.3 Non-EQUI JOIN ---------------------------------------------------------
-- NON-EQUI은 이퀴 조인에서 WHERE절에서 사용하는 '='이 아닌 연산자를 사용하는 경우다.
-- 기본 키와 외래 키 관계가 아닌 열값들의 으미 있는 관계로 조인하는 경우이다.

SELECT * FROM SALGRADE;
SELECT * FROM EMP;

SELECT EMPNO, ENAME, SAL, GRADE
FROM EMP, SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL;

-- 4.1.4 SELF JOIN -------------------------------------------------------------
SELECT * FROM EMP; 

SELECT A.EMPNO AS 사원번호, A.ENAME AS 사원이름,
B.EMPNO AS 상급자사원번호, B.ENAME AS 상급자이름 -- AS로 속성명 변경  
FROM EMP A, EMP B
WHERE A.MGR = B.EMPNO;

-- 4.1.5 OUTER JOIN ------------------------------------------------------------
SELECT * FROM ENROL;
SELECT * FROM SUBJECT;

SELECT A.*, SUB_NAME
FROM ENROL A RIGHT OUTER JOIN SUBJECT B
ON A.SUB_NO = B.SUB_NO;


-- 4.2 부질의(SubQuery) ---------------------------------------------------------
-- SELECT문 내에 또 다른 SELECT 문을 포함하는 것을 의미함
-- '옥성우'보다 신장이 큰 학생들의 학번, 이름, 신장을 구하는 질의문 

-- 1. 일반적인 방법
SELECT STU_NO, STU_NAME, STU_HEIGHT
FROM STUDENT
WHERE STU_NAME = '옥성우';

SELECT STU_NO, STU_NAME, STU_HEIGHT
FROM STUDENT
WHERE STU_HEIGHT > 172;

-- 2. Subquery 방법
SELECT STU_NO, STU_NAME, STU_HEIGHT
FROM STUDENT
WHERE STU_HEIGHT > 
    (SELECT STU_HEIGHT 
        FROM STUDENT 
        WHERE STU_NAME = '옥성우');

-- 3. SELF JOIN을 이용한 방법
SELECT A.STU_NO, A.STU_NAME, A.STU_HEIGHT
FROM STUDENT A, STUDENT B
WHERE A.STU_HEIGHT > B.STU_HEIGHT
    AND B.STU_NAME='옥성우';
    
-- 4.2.1 단일열 부질의
SELECT * 
FROM STUDENT 
WHERE STU_WEIGHT = 
    (SELECT STU_WEIGHT
        FROM STUDENT
        WHERE STU_NAME = '박희철')
        AND STU_NAME<>'박희철'; -- '박희철'의 정보는 제거 
        
        
-- 학생(STUDENT)테이블에서 '컴퓨터정보'학과와 같은 반인 다른 학과의 학생 정보를 
-- IN을 이용하여 구하는 질의문

SELECT *
FROM STUDENT
WHERE STU_CLASS IN (SELECT STU_CLASS
FROM STUDENT
WHERE STU_DEPT = '컴퓨터정보')
AND STU_DEPT <> '컴퓨터정보';

-- 신장이 전체 학생들의 평균 신장보다 큰 학생의 정보를 구하는 질의문 
SELECT *
FROM STUDENT
WHERE STU_HEIGHT > (SELECT AVG(STU_HEIGHT) FROM STUDENT);


-- 신장이 모든 학과들의 평균 신장보다 큰 학생의 정보를 구하는 질의문 
SELECT *
FROM STUDENT
WHERE STU_HEIGHT > ALL
    (SELECT MAX(AVG(STU_HEIGHT)) 
    FROM STUDENT
    GROUP BY STU_DEPT);

-- 4.2.2 복수열 부질의 
-- 실습을 위한 TEST 테이블 생성 
CREATE TABLE TEST(EMPNO, ENAME, SAL, COMM, DEPTNO)
AS
    SELECT EMPNO, ENAME, SAL, COMM, DEPTNO
    FROM EMP
    WHERE DEPTNO = 1;
    
INSERT INTO TEST VALUES(11, 'APPLE', 1000, NULL, 30);
INSERT INTO TEST VALUES(12, 'BANANA', 2000, 100, 30);
INSERT INTO TEST VALUES(13, 'CHEESE', 1000, 0, 10);
INSERT INTO TEST VALUES(14, 'DOG', 2000, NULL, 20);
INSERT INTO TEST VALUES(15, 'EGG', 1000, 100, 20);

SELECT * FROM TEST;

-- 4.2.3 FROM 절의 부질의 
SELECT STU_NO, STU_NAME, A.STU_DEPT, STU_HEIGHT, AVG_HEIGHT
FROM STUDENT A, (SELECT STU_DEPT, ROUND(AVG(STU_HEIGHT),2) AS AVG_HEIGHT
FROM STUDENT
GROUP BY STU_DEPT) B
WHERE A.STU_DEPT = B.STU_DEPT
AND STU_HEIGHT > AVG_HEIGHT;

-- 4.3 집합(SET) 연산자 
CREATE TABLE C_STUDENT
AS SELECT * 
FROM STUDENT WHERE STU_DEPT IN ('기계','전기전자');

CREATE TABLE D_STUDENT
AS SELECT * 
FROM STUDENT WHERE STU_DEPT IN ('전기전자','컴퓨터정보');

-- 4.3.1 집합연산자 종류
-- 1. UNION // A ∪ B 중복은 제외
-- 2. UNION ALL // A ∪ B 중복 포함 
-- 3. INTERSECT // A ∩ B
-- 4. MINUS // A-B

-- 4.3.2 집합연산자 사용 규칙 

SELECT * FROM A_STUDENT
-- UNION, UNION ALL, INTERSECT, MINUS
SELECT * FROM B_STUDENT;

